{
  "name": "falcor-router",
  "version": "0.2.12",
  "description": "A router DataSource constructor for falcor that allows you to model all your cloud data sources as a single JSON resource.",
  "main": "src/Router.js",
  "homepage": "https://github.com/Netflix/falcor-router",
  "author": {
    "name": "Netflix",
    "url": "https://github.com/Netflix/falcor-router/authors.txt"
  },
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "rx": "~2.5.3",
    "falcor-path-syntax": "0.2.4",
    "falcor-path-utils": "0.3.0"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "coveralls": "^2.11.2",
    "falcor": "0.1.12",
    "gulp": "~3.8.11",
    "gulp-bump": "~0.1.13",
    "gulp-clean": "~0.3.1",
    "gulp-concat": "~2.4.3",
    "gulp-eslint": "^0.12.0",
    "gulp-istanbul": "^0.9.0",
    "gulp-license": "~1.0.0",
    "gulp-mocha": "^2.0.1",
    "gulp-rename": "~1.2.0",
    "lodash": "^3.8.0",
    "promise": "^7.0.1",
    "sinon": "^1.15.4",
    "through2": "~0.6.3"
  },
  "scripts": {
    "test": "node node_modules/gulp/bin/gulp.js test-coverage",
    "dist": "node node_modules/gulp/bin/gulp.js dist",
    "lint": "node node_modules/gulp/bin/gulp.js lint"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Netflix/falcor-router.git"
  },
  "keywords": [
    "Falcor",
    "Router",
    "Netflix",
    "falcorjs"
  ],
  "license": "ALV2",
  "bugs": {
    "url": "https://github.com/Netflix/falcor-router/issues"
  },
  "readme": "# Falcor Router [![Build Status](https://magnum.travis-ci.com/Netflix/falcor-router.svg?token=2ZVUVaYjVQbQ8yiHk8zs&branch=master)](https://magnum.travis-ci.com/Netflix/falcor-router)\n\n## Developer Preview\n\n**This release is a developer preview.** We are looking for community help to track down and fix bugs. We are also looking for help porting the Router to other platforms.\n\nYou can check out a working example server for a Netflix-like application [here](http://github.com/netflix/falcor-express-demo) right now. Alternately you can go through this short tutorial:\n\n## Getting Started\n\nLet's use the Falcor Router to build a Virtual JSON resource on an app server and host it at /model.json. The JSON resource will contain the following contents:\n\n~~~js\n{\n  \"greeting\": \"Hello World\"\n}\n~~~\n\nNormally Routers retrieve the data for their Virtual JSON resource from backend data stores or other web services on-demand. However in this simple tutorial the Router will simply return static data for a single key.\n\n### Creating a Virtual JSON Resource with a Falcor Router\n\nFirst we create a folder for our application server.\n\n~~~bash\nmkdir falcor-app-server && cd !$\nnpm init\n~~~\n\nNow we install the Falcor Router.\n\n~~~bash\nnpm i falcor-router -S\n~~~\n\nThen install [express](http://expressjs.com/) and [falcor-express](https://github.com/Netflix/falcor-express).\n\n~~~bash\nnpm i express falcor-express -S\n~~~\n> Support for [Restify is also available](https://github.com/Netflix/falcor-restify.git) (including a [demo](https://github.com/Netflix/falcor-restify-demo.git)): `npm i restify falcor-restify -S`â€”as is [support for Hapi](https://github.com/Netflix/falcor-router.git): `npm i hapi falcor-hapi -S`.\n\nNow we create an index.js file with the following contents:\n\n~~~js\n// index.js\nvar falcorExpress = require('falcor-express');\nvar Router = require('falcor-router');\n\nvar express = require('express');\nvar app = express();\n\napp.use('/model.json', falcorExpress.dataSourceRoute(function (req, res) {\n  // create a Virtual JSON resource with single key (\"greeting\")\n  return new Router([\n    {\n      // match a request for the key \"greeting\"    \n      route: \"greeting\",\n      // respond with a PathValue with the value of \"Hello World.\"\n      get: function() {\n        return {path:[\"greeting\"], value: \"Hello World\"};\n      }\n    }\n  ]);\n}));\n\n// statically host all files in current directory\napp.use(express.static(__dirname + '/'));\n\nvar server = app.listen(3000);\n~~~\n\nNow we run the server, which will listen on port 3000 for requests for /model.json.\n\n~~~sh\nnode index.js\n~~~\n\n### Retrieving Data from the Virtual JSON resource\n\nNow that we've built a simple virtual JSON document with a single read-only key \"greeting\", we will create a test web page and retrieve this key from the server.\n\nNow create an index.html file with the following contents:\n\n~~~html\n<!-- index.html -->\n<html>\n  <head>\n    <!-- Do _not_  rely on this URL in production. Use only during development.  -->\n    <script src=\"//netflix.github.io/falcor/build/falcor.browser.js\"></script>\n    <script>\n      var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n      \n      // retrieve the \"greeting\" key from the root of the Virtual JSON resource\n      model.\n        get(\"greeting\").\n        then(function(response) {\n          document.write(response.json.greeting);\n        });\n    </script>\n  </head>\n  <body>\n  </body>\n</html>\n~~~\n\nNow visit http://localhost:3000/index.html and you should see the message retrieved from the server:\n\nHello World\n\n## More Information\n\nFor an example of a Router built for a Netflix-like application, see [this repository](http://github.com/netflix/falcor-router-demo).\n\nFor in-depth information on the Falcor Router, see the Router Guide in the [Falcor Website](http://netflix.github.io/falcor).\n\nFor discussion please use [Stack Overflow](http://stackoverflow.com/questions/tagged/falcor).\n",
  "readmeFilename": "README.md",
  "_id": "falcor-router@0.2.12",
  "_shasum": "6336292bf72a55b210220c8cd6376c40b91b1980",
  "_from": "falcor-router@^0.2.9",
  "_resolved": "https://registry.npmjs.org/falcor-router/-/falcor-router-0.2.12.tgz"
}
